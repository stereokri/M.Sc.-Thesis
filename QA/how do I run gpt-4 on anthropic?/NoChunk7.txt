<documents>
<document index='0'>
<source>https://python.langchain.com/docs/integrations/providers/gpt4all</source>
<doc_content>GPT4All | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# GPT4All

This page covers how to use the `GPT4All` wrapper within LangChain. The tutorial is divided into two parts: installation and setup, followed by usage with an example.

## Installation and Setup‚Äã

- Install the Python package with `pip install pyllamacpp`

- Download a [GPT4All model](https://github.com/nomic-ai/pyllamacpp#supported-model) and place it in your desired directory

## Usage‚Äã

### GPT4All‚Äã

To use the GPT4All wrapper, you need to provide the path to the pre-trained model file and the model's configuration.

```python
from langchain.llms import GPT4All

# Instantiate the model. Callbacks support token-wise streaming
model = GPT4All(model="./models/gpt4all-model.bin", n_ctx=512, n_threads=8)

# Generate text
response = model("Once upon a time, ")
```

You can also customize the generation parameters, such as n_predict, temp, top_p, top_k, and others.

To stream the model's predictions, add in a CallbackManager.

```python
from langchain.llms import GPT4All
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler

# There are many CallbackHandlers supported, such as
# from langchain.callbacks.streamlit import StreamlitCallbackHandler

callbacks = [StreamingStdOutCallbackHandler()]
model = GPT4All(model="./models/gpt4all-model.bin", n_ctx=512, n_threads=8)

# Generate text. Tokens are streamed through the callback manager.
model("Once upon a time, ", callbacks=callbacks)
```

## Model File‚Äã

You can find links to model file downloads in the [pyllamacpp](https://github.com/nomic-ai/pyllamacpp) repository.

For a more detailed walkthrough of this, see [this notebook](/docs/integrations/llms/gpt4all)

- [Installation and Setup](#installation-and-setup)

- [Usage](#usage)- [GPT4All](#gpt4all-1)

- [Model File](#model-file)</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/integrations/text_embedding/gpt4all</source>
<doc_content>GPT4All | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# GPT4All

[GPT4All](https://gpt4all.io/index.html) is a free-to-use, locally running, privacy-aware chatbot. There is no GPU or internet required. It features popular models and its own models such as GPT4All Falcon, Wizard, etc.

This notebook explains how to use [GPT4All embeddings](https://docs.gpt4all.io/gpt4all_python_embedding.html#gpt4all.gpt4all.Embed4All) with LangChain.

## Install GPT4All's Python Bindings‚Äã

```python
%pip install gpt4all > /dev/null
```

Note: you may need to restart the kernel to use updated packages.

```python
from langchain.embeddings import GPT4AllEmbeddings
```

```python
gpt4all_embd = GPT4AllEmbeddings()
```

```text
    100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 45.5M/45.5M [00:02<00:00, 18.5MiB/s]

    Model downloaded at:  /Users/rlm/.cache/gpt4all/ggml-all-MiniLM-L6-v2-f16.bin

    objc[45711]: Class GGMLMetalClass is implemented in both /Users/rlm/anaconda3/envs/lcn2/lib/python3.9/site-packages/gpt4all/llmodel_DO_NOT_MODIFY/build/libreplit-mainline-metal.dylib (0x29fe18208) and /Users/rlm/anaconda3/envs/lcn2/lib/python3.9/site-packages/gpt4all/llmodel_DO_NOT_MODIFY/build/libllamamodel-mainline-metal.dylib (0x2a0244208). One of the two will be used. Which one is undefined.
```

```python
text = "This is a test document."
```

## Embed the Textual Data‚Äã

```python
query_result = gpt4all_embd.embed_query(text)
```

With embed_documents you can embed multiple pieces of text. You can also map these embeddings with [Nomic's Atlas](https://docs.nomic.ai/index.html) to see a visual representation of your data.

```python
doc_result = gpt4all_embd.embed_documents([text])
```

- [Install GPT4All's Python Bindings](#install-gpt4alls-python-bindings)

- [Embed the Textual Data](#embed-the-textual-data)</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/integrations/llms/gpt4all</source>
<doc_content>GPT4All | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# GPT4All

[GitHub:nomic-ai/gpt4all](https://github.com/nomic-ai/gpt4all) an ecosystem of open-source chatbots trained on a massive collections of clean assistant data including code, stories and dialogue.

This example goes over how to use LangChain to interact with `GPT4All` models.

```python
%pip install gpt4all > /dev/null
```

```text
    Note: you may need to restart the kernel to use updated packages.
```

### Import GPT4All‚Äã

```python
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
from langchain.chains import LLMChain
from langchain.llms import GPT4All
from langchain.prompts import PromptTemplate
```

### Set Up Question to pass to LLM‚Äã

```python
template = """Question: {question}

Answer: Let's think step by step."""

prompt = PromptTemplate(template=template, input_variables=["question"])
```

### Specify Model‚Äã

To run locally, download a compatible ggml-formatted model. 

The [gpt4all page](https://gpt4all.io/index.html) has a useful `Model Explorer` section:

- Select a model of interest

- Download using the UI and move the `.bin` to the `local_path` (noted below)

For more info, visit [https://github.com/nomic-ai/gpt4all](https://github.com/nomic-ai/gpt4all).

```python
local_path = (
    "./models/ggml-gpt4all-l13b-snoozy.bin"  # replace with your desired local file path
)
```

```python
# Callbacks support token-wise streaming
callbacks = [StreamingStdOutCallbackHandler()]

# Verbose is required to pass to the callback manager
llm = GPT4All(model=local_path, callbacks=callbacks, verbose=True)

# If you want to use a custom model add the backend parameter
# Check https://docs.gpt4all.io/gpt4all_python.html for supported backends
llm = GPT4All(model=local_path, backend="gptj", callbacks=callbacks, verbose=True)
```

```python
llm_chain = LLMChain(prompt=prompt, llm=llm)
```

```python
question = "What NFL team won the Super Bowl in the year Justin Bieber was born?"

llm_chain.run(question)
```

Justin Bieber was born on March 1, 1994. In 1994, The Cowboys won Super Bowl XXVIII.

- [Import GPT4All](#import-gpt4all)

- [Set Up Question to pass to LLM](#set-up-question-to-pass-to-llm)

- [Specify Model](#specify-model)</doc_content>
</document>





<document index='3'>
<source>https://python.langchain.com/docs/integrations/chat/anthropic_functions</source>
<doc_content>Anthropic Functions | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Anthropic Functions

This notebook shows how to use an experimental wrapper around Anthropic that gives it the same API as OpenAI Functions.

```python
from langchain_experimental.llms.anthropic_functions import AnthropicFunctions
```

```text
    /Users/harrisonchase/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (3.6.14) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.
      warnings.warn(
```

## Initialize Model‚Äã

You can initialize this wrapper the same way you'd initialize ChatAnthropic

```python
model = AnthropicFunctions(model="claude-2")
```

## Passing in functions‚Äã

You can now pass in functions in a similar way

```python
functions = [
    {
        "name": "get_current_weather",
        "description": "Get the current weather in a given location",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The city and state, e.g. San Francisco, CA",
                },
                "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
            },
            "required": ["location"],
        },
    }
]
```

```python
from langchain.schema import HumanMessage
```

```python
response = model.predict_messages(
    [HumanMessage(content="whats the weater in boston?")], functions=functions
)
```

```python
response
```

```text
    AIMessage(content=' ', additional_kwargs={'function_call': {'name': 'get_current_weather', 'arguments': '{"location": "Boston, MA", "unit": "fahrenheit"}'}}, example=False)
```

## Using for extraction‚Äã

You can now use this for extraction.

```python
from langchain.chains import create_extraction_chain

schema = {
    "properties": {
        "name": {"type": "string"},
        "height": {"type": "integer"},
        "hair_color": {"type": "string"},
    },
    "required": ["name", "height"],
}
inp = """
Alex is 5 feet tall. Claudia is 1 feet taller Alex and jumps higher than him. Claudia is a brunette and Alex is blonde.
        """
```

```python
chain = create_extraction_chain(schema, model)
```

```python
chain.run(inp)
```

```text
    [{'name': 'Alex', 'height': '5', 'hair_color': 'blonde'},
     {'name': 'Claudia', 'height': '6', 'hair_color': 'brunette'}]
```

## Using for tagging‚Äã

You can now use this for tagging

```python
from langchain.chains import create_tagging_chain
```

```python
schema = {
    "properties": {
        "sentiment": {"type": "string"},
        "aggressiveness": {"type": "integer"},
        "language": {"type": "string"},
    }
}
```

```python
chain = create_tagging_chain(schema, model)
```

```python
chain.run("this is really cool")
```

```text
    {'sentiment': 'positive', 'aggressiveness': '0', 'language': 'english'}
```

- [Initialize Model](#initialize-model)

- [Passing in functions](#passing-in-functions)

- [Using for extraction](#using-for-extraction)

- [Using for tagging](#using-for-tagging)</doc_content>
</document>





<document index='4'>
<source>https://api.python.langchain.com/en/latest/llms/langchain.llms.anthropic.Anthropic.html</source>
<doc_content>langchain.llms.anthropic.Anthropic ‚Äî ü¶úüîó LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.llms.anthropic.Anthropic

langchain.llms.anthropic.Anthropic¬∂

class langchain.llms.anthropic.Anthropic[source]¬∂
Bases: LLM, _AnthropicCommon
Anthropic large language models.
To use, you should have the anthropic python package installed, and the
environment variable ANTHROPIC_API_KEY set with your API key, or pass
it as a named parameter to the constructor.
Example
import anthropic
from langchain.llms import Anthropic

model = Anthropic(model="<model_name>", anthropic_api_key="my-api-key")

# Simplest invocation, automatically wrapped with HUMAN_PROMPT
# and AI_PROMPT.
response = model("What are the biggest risks facing humanity?")

# Or if you want to use the chat mode, build a few-shot-prompt, or
# put words in the Assistant's mouth, use HUMAN_PROMPT and AI_PROMPT:
raw_prompt = "What are the biggest risks facing humanity?"
prompt = f"{anthropic.HUMAN_PROMPT} {prompt}{anthropic.AI_PROMPT}"
response = model(prompt)

Create a new model by parsing and validating input data from keyword arguments.
Raises ValidationError if the input data cannot be parsed to form a valid model.

param AI_PROMPT: Optional[str] = None¬∂

param HUMAN_PROMPT: Optional[str] = None¬∂

param anthropic_api_key: Optional[SecretStr] = None¬∂

Constraints

type = string
writeOnly = True
format = password

param anthropic_api_url: Optional[str] = None¬∂

param cache: Optional[bool] = None¬∂

param callback_manager: Optional[BaseCallbackManager] = None¬∂

param callbacks: Callbacks = None¬∂

param count_tokens: Optional[Callable[[str], int]] = None¬∂

param default_request_timeout: Optional[float] = None¬∂
Timeout for requests to Anthropic Completion API. Default is 600 seconds.

param max_tokens_to_sample: int = 256 (alias 'max_tokens')¬∂
Denotes the number of tokens to predict per generation.

param metadata: Optional[Dict[str, Any]] = None¬∂
Metadata to add to the run trace.

param model: str = 'claude-2' (alias 'model_name')¬∂
Model name to use.

param model_kwargs: Dict[str, Any] [Optional]¬∂

param streaming: bool = False¬∂
Whether to stream the results.

param tags: Optional[List[str]] = None¬∂
Tags to add to the run trace.

param temperature: Optional[float] = None¬∂
A non-negative float that tunes the degree of randomness in generation.

param top_k: Optional[int] = None¬∂
Number of most likely tokens to consider at each step.

param top_p: Optional[float] = None¬∂
Total probability mass of tokens to consider at each step.

param verbose: bool [Optional]¬∂
Whether to print out response text.

__call__(prompt: str, stop: Optional[List[str]] = None, callbacks: Optional[Union[List[BaseCallbackHandler], BaseCallbackManager]] = None, *, tags: Optional[List[str]] = None, metadata: Optional[Dict[str, Any]] = None, **kwargs: Any) ‚Üí str¬∂
Check Cache and run the LLM on the given prompt and input.

async abatch(inputs: List[Union[PromptValue, str, List[BaseMessage]]], config: Optional[Union[RunnableConfig, List[RunnableConfig]]] = None, *, return_exceptions: bool = False, **kwargs: Any) ‚Üí List[str]¬∂
Default implementation runs ainvoke in parallel using asyncio.gather.
The default implementation of batch works well for IO bound runnables.
Subclasses should override this method if they can batch more efficiently;
e.g., if the underlying runnable uses an API which supports a batch mode.

async agenerate(prompts: List[str], stop: Optional[List[str]] = None, callbacks: Union[List[BaseCallbackHandler], BaseCallbackManager, None, List[Optional[Union[List[BaseCallbackHandler], BaseCallbackManager]]]] = None, *, tags: Optional[Union[List[str], List[List[str]]]] = None, metadata: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None, run_name: Optional[Union[str, List[str]]] = None, **kwargs: Any) ‚Üí LLMResult¬∂
Run the LLM on the given prompt and input.

async agenerate_prompt(prompts: List[PromptValue], stop: Optional[List[str]] = None, callbacks: Union[List[BaseCallbackHandler], BaseCallbackManager, None, List[Optional[Union[List[BaseCallbackHandler], BaseCallbackManager]]]] = None, **kwargs: Any) ‚Üí LLMResult¬∂
Asynchronously pass a sequence of prompts and return model generations.
This method should make use of batched calls for models that expose a batched
API.

Use this method when you want to:
take advantage of batched calls,
need more output from the model than just the top generated value,

are building chains that are agnostic to the underlying language modeltype (e.g., pure text completion models vs chat models).

Parameters

prompts ‚Äì List of PromptValues. A PromptValue is an object that can be
converted to match the format of any language model (string for pure
text generation models and BaseMessages for chat models).
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
callbacks ‚Äì Callbacks to pass through. Used for executing additional
functionality, such as logging or streaming, throughout generation.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns

An LLMResult, which contains a list of candidate Generations for each inputprompt and additional model provider-specific output.

async ainvoke(input: Union[PromptValue, str, List[BaseMessage]], config: Optional[RunnableConfig] = None, *, stop: Optional[List[str]] = None, **kwargs: Any) ‚Üí str¬∂
Default implementation of ainvoke, calls invoke from a thread.
The default implementation allows usage of async code even if
the runnable did not implement a native async version of invoke.
Subclasses should override this method if they can run asynchronously.

async apredict(text: str, *, stop: Optional[Sequence[str]] = None, **kwargs: Any) ‚Üí str¬∂
Asynchronously pass a string to the model and return a string prediction.

Use this method when calling pure text generation models and only the topcandidate generation is needed.

Parameters

text ‚Äì String input to pass to the model.
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns
Top model prediction as a string.

async apredict_messages(messages: List[BaseMessage], *, stop: Optional[Sequence[str]] = None, **kwargs: Any) ‚Üí BaseMessage¬∂
Asynchronously pass messages to the model and return a message prediction.

Use this method when calling chat models and only the topcandidate generation is needed.

Parameters

messages ‚Äì A sequence of chat messages corresponding to a single model input.
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns
Top model prediction as a message.

async astream(input: Union[PromptValue, str, List[BaseMessage]], config: Optional[RunnableConfig] = None, *, stop: Optional[List[str]] = None, **kwargs: Any) ‚Üí AsyncIterator[str]¬∂
Default implementation of astream, which calls ainvoke.
Subclasses should override this method if they support streaming output.

async astream_log(input: Any, config: Optional[RunnableConfig] = None, *, diff: bool = True, include_names: Optional[Sequence[str]] = None, include_types: Optional[Sequence[str]] = None, include_tags: Optional[Sequence[str]] = None, exclude_names: Optional[Sequence[str]] = None, exclude_types: Optional[Sequence[str]] = None, exclude_tags: Optional[Sequence[str]] = None, **kwargs: Optional[Any]) ‚Üí Union[AsyncIterator[RunLogPatch], AsyncIterator[RunLog]]¬∂
Stream all output from a runnable, as reported to the callback system.
This includes all inner runs of LLMs, Retrievers, Tools, etc.
Output is streamed as Log objects, which include a list of
jsonpatch ops that describe how the state of the run has changed in each
step, and the final state of the run.
The jsonpatch ops can be applied in order to construct state.

async atransform(input: AsyncIterator[Input], config: Optional[RunnableConfig] = None, **kwargs: Optional[Any]) ‚Üí AsyncIterator[Output]¬∂
Default implementation of atransform, which buffers input and calls astream.
Subclasses should override this method if they can start producing output while
input is still being generated.

batch(inputs: List[Union[PromptValue, str, List[BaseMessage]]], config: Optional[Union[RunnableConfig, List[RunnableConfig]]] = None, *, return_exceptions: bool = False, **kwargs: Any) ‚Üí List[str]¬∂
Default implementation runs invoke in parallel using a thread pool executor.
The default implementation of batch works well for IO bound runnables.
Subclasses should override this method if they can batch more efficiently;
e.g., if the underlying runnable uses an API which supports a batch mode.

bind(**kwargs: Any) ‚Üí Runnable[Input, Output]¬∂
Bind arguments to a Runnable, returning a new Runnable.

config_schema(*, include: Optional[Sequence[str]] = None) ‚Üí Type[BaseModel]¬∂
The type of config this runnable accepts specified as a pydantic model.
To mark a field as configurable, see the configurable_fields
and configurable_alternatives methods.

Parameters
include ‚Äì A list of fields to include in the config schema.

Returns
A pydantic model that can be used to validate config.

configurable_alternatives(which: ConfigurableField, default_key: str = 'default', **kwargs: Union[Runnable[Input, Output], Callable[[], Runnable[Input, Output]]]) ‚Üí RunnableSerializable[Input, Output]¬∂

configurable_fields(**kwargs: Union[ConfigurableField, ConfigurableFieldSingleOption, ConfigurableFieldMultiOption]) ‚Üí RunnableSerializable[Input, Output]¬∂

classmethod construct(_fields_set: Optional[SetStr] = None, **values: Any) ‚Üí Model¬∂
Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
Default values are respected, but no other validation is performed.
Behaves as if Config.extra = ‚Äòallow‚Äô was set since it adds all passed values

convert_prompt(prompt: PromptValue) ‚Üí str[source]¬∂

copy(*, include: Optional[Union[AbstractSetIntStr, MappingIntStrAny]] = None, exclude: Optional[Union[AbstractSetIntStr, MappingIntStrAny]] = None, update: Optional[DictStrAny] = None, deep: bool = False) ‚Üí Model¬∂
Duplicate a model, optionally choose which fields to include, exclude and change.

Parameters

include ‚Äì fields to include in new model
exclude ‚Äì fields to exclude from new model, as with values this takes precedence over include
update ‚Äì values to change/add in the new model. Note: the data is not validated before creating
the new model: you should trust this data
deep ‚Äì set to True to make a deep copy of the model

Returns
new model instance

dict(**kwargs: Any) ‚Üí Dict¬∂
Return a dictionary of the LLM.

classmethod from_orm(obj: Any) ‚Üí Model¬∂

generate(prompts: List[str], stop: Optional[List[str]] = None, callbacks: Union[List[BaseCallbackHandler], BaseCallbackManager, None, List[Optional[Union[List[BaseCallbackHandler], BaseCallbackManager]]]] = None, *, tags: Optional[Union[List[str], List[List[str]]]] = None, metadata: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None, run_name: Optional[Union[str, List[str]]] = None, **kwargs: Any) ‚Üí LLMResult¬∂
Run the LLM on the given prompt and input.

generate_prompt(prompts: List[PromptValue], stop: Optional[List[str]] = None, callbacks: Union[List[BaseCallbackHandler], BaseCallbackManager, None, List[Optional[Union[List[BaseCallbackHandler], BaseCallbackManager]]]] = None, **kwargs: Any) ‚Üí LLMResult¬∂
Pass a sequence of prompts to the model and return model generations.
This method should make use of batched calls for models that expose a batched
API.

Use this method when you want to:
take advantage of batched calls,
need more output from the model than just the top generated value,

are building chains that are agnostic to the underlying language modeltype (e.g., pure text completion models vs chat models).

Parameters

prompts ‚Äì List of PromptValues. A PromptValue is an object that can be
converted to match the format of any language model (string for pure
text generation models and BaseMessages for chat models).
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
callbacks ‚Äì Callbacks to pass through. Used for executing additional
functionality, such as logging or streaming, throughout generation.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns

An LLMResult, which contains a list of candidate Generations for each inputprompt and additional model provider-specific output.

get_input_schema(config: Optional[RunnableConfig] = None) ‚Üí Type[BaseModel]¬∂
Get a pydantic model that can be used to validate input to the runnable.
Runnables that leverage the configurable_fields and configurable_alternatives
methods will have a dynamic input schema that depends on which
configuration the runnable is invoked with.
This method allows to get an input schema for a specific configuration.

Parameters
config ‚Äì A config to use when generating the schema.

Returns
A pydantic model that can be used to validate input.

classmethod get_lc_namespace() ‚Üí List[str]¬∂
Get the namespace of the langchain object.
For example, if the class is langchain.llms.openai.OpenAI, then the
namespace is [‚Äúlangchain‚Äù, ‚Äúllms‚Äù, ‚Äúopenai‚Äù]

get_num_tokens(text: str) ‚Üí int[source]¬∂
Calculate number of tokens.

get_num_tokens_from_messages(messages: List[BaseMessage]) ‚Üí int¬∂
Get the number of tokens in the messages.
Useful for checking if an input will fit in a model‚Äôs context window.

Parameters
messages ‚Äì The message inputs to tokenize.

Returns
The sum of the number of tokens across the messages.

get_output_schema(config: Optional[RunnableConfig] = None) ‚Üí Type[BaseModel]¬∂
Get a pydantic model that can be used to validate output to the runnable.
Runnables that leverage the configurable_fields and configurable_alternatives
methods will have a dynamic output schema that depends on which
configuration the runnable is invoked with.
This method allows to get an output schema for a specific configuration.

Parameters
config ‚Äì A config to use when generating the schema.

Returns
A pydantic model that can be used to validate output.

get_token_ids(text: str) ‚Üí List[int]¬∂
Return the ordered ids of the tokens in a text.

Parameters
text ‚Äì The string input to tokenize.

Returns

A list of ids corresponding to the tokens in the text, in order they occurin the text.

invoke(input: Union[PromptValue, str, List[BaseMessage]], config: Optional[RunnableConfig] = None, *, stop: Optional[List[str]] = None, **kwargs: Any) ‚Üí str¬∂
Transform a single input into an output. Override to implement.

Parameters

input ‚Äì The input to the runnable.
config ‚Äì A config to use when invoking the runnable.
The config supports standard keys like ‚Äòtags‚Äô, ‚Äòmetadata‚Äô for tracing
purposes, ‚Äòmax_concurrency‚Äô for controlling how much work to do
in parallel, and other keys. Please refer to the RunnableConfig
for more details.

Returns
The output of the runnable.

classmethod is_lc_serializable() ‚Üí bool¬∂
Is this class serializable?

json(*, include: Optional[Union[AbstractSetIntStr, MappingIntStrAny]] = None, exclude: Optional[Union[AbstractSetIntStr, MappingIntStrAny]] = None, by_alias: bool = False, skip_defaults: Optional[bool] = None, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False, encoder: Optional[Callable[[Any], Any]] = None, models_as_dict: bool = True, **dumps_kwargs: Any) ‚Üí unicode¬∂
Generate a JSON representation of the model, include and exclude arguments as per dict().
encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps().

classmethod lc_id() ‚Üí List[str]¬∂
A unique identifier for this class for serialization purposes.
The unique identifier is a list of strings that describes the path
to the object.

map() ‚Üí Runnable[List[Input], List[Output]]¬∂
Return a new Runnable that maps a list of inputs to a list of outputs,
by calling invoke() with each input.

classmethod parse_file(path: Union[str, Path], *, content_type: unicode = None, encoding: unicode = 'utf8', proto: Protocol = None, allow_pickle: bool = False) ‚Üí Model¬∂

classmethod parse_obj(obj: Any) ‚Üí Model¬∂

classmethod parse_raw(b: Union[str, bytes], *, content_type: unicode = None, encoding: unicode = 'utf8', proto: Protocol = None, allow_pickle: bool = False) ‚Üí Model¬∂

predict(text: str, *, stop: Optional[Sequence[str]] = None, **kwargs: Any) ‚Üí str¬∂
Pass a single string input to the model and return a string prediction.

Use this method when passing in raw text. If you want to pass in specifictypes of chat messages, use predict_messages.

Parameters

text ‚Äì String input to pass to the model.
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns
Top model prediction as a string.

predict_messages(messages: List[BaseMessage], *, stop: Optional[Sequence[str]] = None, **kwargs: Any) ‚Üí BaseMessage¬∂
Pass a message sequence to the model and return a message prediction.

Use this method when passing in chat messages. If you want to pass in raw text,use predict.

Parameters

messages ‚Äì A sequence of chat messages corresponding to a single model input.
stop ‚Äì Stop words to use when generating. Model output is cut off at the
first occurrence of any of these substrings.
**kwargs ‚Äì Arbitrary additional keyword arguments. These are usually passed
to the model provider API call.

Returns
Top model prediction as a message.

save(file_path: Union[Path, str]) ‚Üí None¬∂
Save the LLM.

Parameters
file_path ‚Äì Path to file to save the LLM to.

Example:
.. code-block:: python

llm.save(file_path=‚Äùpath/llm.yaml‚Äù)

classmethod schema(by_alias: bool = True, ref_template: unicode = '#/definitions/{model}') ‚Üí DictStrAny¬∂

classmethod schema_json(*, by_alias: bool = True, ref_template: unicode = '#/definitions/{model}', **dumps_kwargs: Any) ‚Üí unicode¬∂

stream(input: Union[PromptValue, str, List[BaseMessage]], config: Optional[RunnableConfig] = None, *, stop: Optional[List[str]] = None, **kwargs: Any) ‚Üí Iterator[str]¬∂
Default implementation of stream, which calls invoke.
Subclasses should override this method if they support streaming output.

to_json() ‚Üí Union[SerializedConstructor, SerializedNotImplemented]¬∂

to_json_not_implemented() ‚Üí SerializedNotImplemented¬∂

transform(input: Iterator[Input], config: Optional[RunnableConfig] = None, **kwargs: Optional[Any]) ‚Üí Iterator[Output]¬∂
Default implementation of transform, which buffers input and then calls stream.
Subclasses should override this method if they can start producing output while
input is still being generated.

classmethod update_forward_refs(**localns: Any) ‚Üí None¬∂
Try to update ForwardRefs on fields based on this Model, globalns and localns.

classmethod validate(value: Any) ‚Üí Model¬∂

with_config(config: Optional[RunnableConfig] = None, **kwargs: Any) ‚Üí Runnable[Input, Output]¬∂
Bind config to a Runnable, returning a new Runnable.

with_fallbacks(fallbacks: Sequence[Runnable[Input, Output]], *, exceptions_to_handle: Tuple[Type[BaseException], ...] = (<class 'Exception'>,)) ‚Üí RunnableWithFallbacksT[Input, Output]¬∂
Add fallbacks to a runnable, returning a new Runnable.

Parameters

fallbacks ‚Äì A sequence of runnables to try if the original runnable fails.
exceptions_to_handle ‚Äì A tuple of exception types to handle.

Returns
A new Runnable that will try the original runnable, and then each
fallback in order, upon failures.

with_listeners(*, on_start: Optional[Listener] = None, on_end: Optional[Listener] = None, on_error: Optional[Listener] = None) ‚Üí Runnable[Input, Output]¬∂
Bind lifecycle listeners to a Runnable, returning a new Runnable.
on_start: Called before the runnable starts running, with the Run object.
on_end: Called after the runnable finishes running, with the Run object.
on_error: Called if the runnable throws an error, with the Run object.
The Run object contains information about the run, including its id,
type, input, output, error, start_time, end_time, and any tags or metadata
added to the run.

with_retry(*, retry_if_exception_type: ~typing.Tuple[~typing.Type[BaseException], ...] = (<class 'Exception'>,), wait_exponential_jitter: bool = True, stop_after_attempt: int = 3) ‚Üí Runnable[Input, Output]¬∂
Create a new Runnable that retries the original runnable on exceptions.

Parameters

retry_if_exception_type ‚Äì A tuple of exception types to retry on
wait_exponential_jitter ‚Äì Whether to add jitter to the wait time
between retries
stop_after_attempt ‚Äì The maximum number of attempts to make before giving up

Returns
A new Runnable that retries the original runnable on exceptions.

with_types(*, input_type: Optional[Type[Input]] = None, output_type: Optional[Type[Output]] = None) ‚Üí Runnable[Input, Output]¬∂
Bind input and output types to a Runnable, returning a new Runnable.

property InputType: TypeAlias¬∂
Get the input type for this runnable.

property OutputType: Type[str]¬∂
Get the input type for this runnable.

property config_specs: List[langchain.schema.runnable.utils.ConfigurableFieldSpec]¬∂
List configurable fields for this runnable.

property input_schema: Type[pydantic.main.BaseModel]¬∂
The type of input this runnable accepts specified as a pydantic model.

property lc_attributes: Dict¬∂
List of attribute names that should be included in the serialized kwargs.
These attributes must be accepted by the constructor.

property lc_secrets: Dict[str, str]¬∂
A map of constructor argument names to secret ids.

For example,{‚Äúopenai_api_key‚Äù: ‚ÄúOPENAI_API_KEY‚Äù}

property output_schema: Type[pydantic.main.BaseModel]¬∂
The type of output this runnable produces specified as a pydantic model.

            ¬© 2023, Harrison Chase.
          Last updated on Nov 17, 2023.
          Show this page source</doc_content>
</document>





<document index='5'>
<source>https://python.langchain.com/docs/integrations/chat/anthropic</source>
<doc_content>Anthropic | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Anthropic

This notebook covers how to get started with Anthropic chat models.

```python
from langchain.chat_models import ChatAnthropic
from langchain.schema import HumanMessage
```

```python
chat = ChatAnthropic()
```

```python
messages = [
    HumanMessage(
        content="Translate this sentence from English to French. I love programming."
    )
]
chat(messages)
```

```text
    AIMessage(content=" J'aime la programmation.", additional_kwargs={}, example=False)
```

## ChatAnthropic also supports async and streaming functionality:‚Äã

```python
from langchain.callbacks.manager import CallbackManager
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
```

```python
await chat.agenerate([messages])
```

```text
    LLMResult(generations=[[ChatGeneration(text=" J'aime programmer.", generation_info=None, message=AIMessage(content=" J'aime programmer.", additional_kwargs={}, example=False))]], llm_output={}, run=[RunInfo(run_id=UUID('8cc8fb68-1c35-439c-96a0-695036a93652'))])
```

```python
chat = ChatAnthropic(
    streaming=True,
    verbose=True,
    callback_manager=CallbackManager([StreamingStdOutCallbackHandler()]),
)
chat(messages)
```

```text
     J'aime la programmation.

    AIMessage(content=" J'aime la programmation.", additional_kwargs={}, example=False)
```

- [ChatAnthropic also supports async and streaming functionality:](#chatanthropic-also-supports-async-and-streaming-functionality)</doc_content>
</document>





<document index='6'>
<source>https://python.langchain.com/docs/templates/extraction-anthropic-functions</source>
<doc_content>extraction-anthropic-functions | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# extraction-anthropic-functions

This template enables [Anthropic function calling](https://python.langchain.com/docs/integrations/chat/anthropic_functions). 

This can be used for various tasks, such as extraction or tagging.

The function output schema can be set in `chain.py`. 

## Environment Setup‚Äã

Set the `ANTHROPIC_API_KEY` environment variable to access the Anthropic models.

## Usage‚Äã

To use this package, you should first have the LangChain CLI installed:

```shell
pip install -U langchain-cli
```

To create a new LangChain project and install this as the only package, you can do:

```shell
langchain app new my-app --package extraction-anthropic-functions
```

If you want to add this to an existing project, you can just run:

```shell
langchain app add extraction-anthropic-functions
```

And add the following code to your `server.py` file:

```python
from extraction_anthropic_functions import chain as extraction_anthropic_functions_chain

add_routes(app, extraction_anthropic_functions_chain, path="/extraction-anthropic-functions")
```

(Optional) Let's now configure LangSmith.
LangSmith will help us trace, monitor and debug LangChain applications.
LangSmith is currently in private beta, you can sign up [here](https://smith.langchain.com/).
If you don't have access, you can skip this section

```shell
export LANGCHAIN_TRACING_V2=true
export LANGCHAIN_API_KEY=<your-api-key>
export LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to "default"
```

If you are inside this directory, then you can spin up a LangServe instance directly by:

```shell
langchain serve
```

This will start the FastAPI app with a server is running locally at
[http://localhost:8000](http://localhost:8000)

We can see all templates at [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)
We can access the playground at [http://127.0.0.1:8000/extraction-anthropic-functions/playground](http://127.0.0.1:8000/extraction-anthropic-functions/playground) 

We can access the template from code with:

```python
from langserve.client import RemoteRunnable

runnable = RemoteRunnable("http://localhost:8000/extraction-anthropic-functions")
```

By default, the package will extract the title and author of papers from the information you specify in `chain.py`. This template will use `Claude2` by default. 

- [Environment Setup](#environment-setup)

- [Usage](#usage)</doc_content>
</document>





</documents>



Answer: You can't directly run GPT-4 on Anthropic as Anthropic is a separate AI model. However, you can use LangChain to integrate Anthropic models into your application. To get started with Anthropic chat models, you can follow the example code in the retrieved documents, which shows how to import and initialize the `ChatAnthropic` class.