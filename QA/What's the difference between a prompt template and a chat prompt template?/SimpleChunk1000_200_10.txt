<documents>
<document index='0'>
<source>https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template</source>
<doc_content>## Creating a custom prompt template​

There are essentially two distinct prompt templates available - string prompt templates and chat prompt templates. String prompt templates provides a simple prompt in string format, while chat prompt templates produces a more structured prompt to be used with a chat API.

In this guide, we will create a custom prompt using a string prompt template. 

To create a custom string prompt template, there are two requirements:</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template</source>
<doc_content>## Creating a custom prompt template​

There are essentially two distinct prompt templates available - string prompt templates and chat prompt templates. String prompt templates provides a simple prompt in string format, while chat prompt templates produces a more structured prompt to be used with a chat API.

In this guide, we will create a custom prompt using a string prompt template. 

To create a custom string prompt template, there are two requirements:</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/get_started/quickstart</source>
<doc_content>`PromptTemplate`s can also be used to produce a list of messages.
In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc.).
Here, what happens most often is a `ChatPromptTemplate` is a list of `ChatMessageTemplates`.
Each `ChatMessageTemplate` contains instructions for how to format that `ChatMessage` - its role, and then also its content.
Let's take a look at this below:</doc_content>
</document>





<document index='3'>
<source>https://python.langchain.com/docs/get_started/quickstart</source>
<doc_content>`PromptTemplate`s can also be used to produce a list of messages.
In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc.).
Here, what happens most often is a `ChatPromptTemplate` is a list of `ChatMessageTemplates`.
Each `ChatMessageTemplate` contains instructions for how to format that `ChatMessage` - its role, and then also its content.
Let's take a look at this below:</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/get_started/quickstart</source>
<doc_content>`PromptTemplate`s can also be used to produce a list of messages.
In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc.).
Here, what happens most often is a `ChatPromptTemplate` is a list of `ChatMessageTemplates`.
Each `ChatMessageTemplate` contains instructions for how to format that `ChatMessage` - its role, and then also its content.
Let's take a look at this below:

```python
from langchain.prompts.chat import ChatPromptTemplate

template = "You are a helpful assistant that translates {input_language} to {output_language}."
human_template = "{text}"

chat_prompt = ChatPromptTemplate.from_messages([
    ("system", template),
    ("human", human_template),
])

chat_prompt.format_messages(input_language="English", output_language="French", text="I love programming.")
```</doc_content>
</document>





<document index='5'>
<source>https://python.langchain.com/docs/use_cases/chatbots</source>
<doc_content>- `prompt template`: Prompt templates make it easy to assemble prompts that combine default messages, user input, chat history, and (optionally) additional retrieved context.

- `memory`: [See here](/docs/modules/memory/) for in-depth documentation on memory types

- `retriever` (optional): [See here](/docs/modules/data_connection/retrievers) for in-depth documentation on retrieval systems. These are useful if you want to build a chatbot with domain-specific knowledge.

## Quickstart​</doc_content>
</document>





<document index='6'>
<source>https://python.langchain.com/docs/use_cases/chatbots</source>
<doc_content>- `prompt template`: Prompt templates make it easy to assemble prompts that combine default messages, user input, chat history, and (optionally) additional retrieved context.

- `memory`: [See here](/docs/modules/memory/) for in-depth documentation on memory types

- `retriever` (optional): [See here](/docs/modules/data_connection/retrievers) for in-depth documentation on retrieval systems. These are useful if you want to build a chatbot with domain-specific knowledge.

## Quickstart​</doc_content>
</document>





<document index='7'>
<source>https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/</source>
<doc_content>## ChatPromptTemplate​

The prompt to [chat models](/docs/modules/model_io/prompts/models/chat) is a list of chat messages.

Each chat message is associated with content, and an additional parameter called `role`.
For example, in the OpenAI [Chat Completions API](https://platform.openai.com/docs/guides/chat/introduction), a chat message can be associated with an AI assistant, a human or a system role.

Create a chat prompt template like this:</doc_content>
</document>





<document index='8'>
<source>https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/</source>
<doc_content>## ChatPromptTemplate​

The prompt to [chat models](/docs/modules/model_io/prompts/models/chat) is a list of chat messages.

Each chat message is associated with content, and an additional parameter called `role`.
For example, in the OpenAI [Chat Completions API](https://platform.openai.com/docs/guides/chat/introduction), a chat message can be associated with an AI assistant, a human or a system role.

Create a chat prompt template like this:</doc_content>
</document>





<document index='9'>
<source>https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template</source>
<doc_content>## Creating a custom prompt template​

There are essentially two distinct prompt templates available - string prompt templates and chat prompt templates. String prompt templates provides a simple prompt in string format, while chat prompt templates produces a more structured prompt to be used with a chat API.

In this guide, we will create a custom prompt using a string prompt template. 

To create a custom string prompt template, there are two requirements:

1. It has an input_variables attribute that exposes what input variables the prompt template expects.

2. It defines a format method that takes in keyword arguments corresponding to the expected input_variables and returns the formatted prompt.

We will create a custom prompt template that takes in the function name as input and formats the prompt to provide the source code of the function. To achieve this, let's first create a function that will return the source code of a function given its name.

```python
import inspect</doc_content>
</document>





</documents>



Answer: String prompt templates provide a simple prompt in string format, while chat prompt templates produce a more structured prompt to be used with a chat API. String prompt templates are less complex and straightforward, whereas chat prompt templates are more organized and suitable for use with chat APIs.