<documents>
<document index='0'>
<source>https://python.langchain.com/docs/integrations/vectorstores</source>
<doc_content>ClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/integrations/vectorstores/clickhouse</source>
<doc_content>ClickHouse | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# ClickHouse

[ClickHouse](https://clickhouse.com/) is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like `L2Distance`) as well as [approximate nearest neighbor search indexes](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/annindexes) enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.

This notebook shows how to use functionality related to the `ClickHouse` vector search.

## Setting up environments‚Äã

Setting up local clickhouse server with docker (optional)</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/integrations/providers/clickhouse</source>
<doc_content>ClickHouse | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# ClickHouse

[ClickHouse](https://clickhouse.com/) is the fast and resource efficient open-source database for real-time
apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries.
It has data structures and distance search functions (like `L2Distance`) as well as
[approximate nearest neighbor search indexes](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/annindexes)
That enables ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.

## Installation and Setup‚Äã

We need to install `clickhouse-connect` python package.

```bash
pip install clickhouse-connect
```

## Vector Store‚Äã

See a [usage example](/docs/integrations/vectorstores/clickhouse).

```python
from langchain.vectorstores import Clickhouse, ClickhouseSettings
```</doc_content>
</document>





<document index='3'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.clickhouse.Clickhouse.html</source>
<doc_content>langchain.vectorstores.clickhouse.Clickhouse ‚Äî ü¶úüîó LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.clickhouse.Clickhouse

langchain.vectorstores.clickhouse.Clickhouse¬∂

class langchain.vectorstores.clickhouse.Clickhouse(embedding: Embeddings, config: Optional[ClickhouseSettings] = None, **kwargs: Any)[source]¬∂
ClickHouse VectorSearch vector store.
You need a clickhouse-connect python package, and a valid account
to connect to ClickHouse.
ClickHouse can not only search with simple vector indexes,
it also supports complex query with multiple conditions,
constraints and even sub-queries.

For more information, please visit[ClickHouse official site](https://clickhouse.com/clickhouse)

ClickHouse Wrapper to LangChain
embedding_function (Embeddings):
config (ClickHouseSettings): Configuration to ClickHouse Client
Other keyword arguments will pass into

[clickhouse-connect](https://docs.clickhouse.com/)

Attributes</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/integrations/providers/clickhouse</source>
<doc_content>[ClickHouse](https://clickhouse.com/) is the fast and resource efficient open-source database for real-time
apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries.
It has data structures and distance search functions (like `L2Distance`) as well as
[approximate nearest neighbor search indexes](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/annindexes)</doc_content>
</document>





<document index='5'>
<source>https://api.python.langchain.com/en/latest/api_reference.html</source>
<doc_content>vectorstores.clickhouse.Clickhouse(embedding)
ClickHouse VectorSearch vector store.

vectorstores.clickhouse.ClickhouseSettings
ClickHouse client configuration.

vectorstores.dashvector.DashVector(...)
DashVector vector store.

vectorstores.deeplake.DeepLake([...])
Activeloop Deep Lake vector store.

vectorstores.dingo.Dingo(embedding,¬†text_key,¬†*)
Dingo vector store.

vectorstores.docarray.base.DocArrayIndex(...)
Base class for DocArray based vector stores.</doc_content>
</document>





<document index='6'>
<source>https://python.langchain.com/docs/integrations/vectorstores/clickhouse</source>
<doc_content>[ClickHouse](https://clickhouse.com/) is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like `L2Distance`) as well as [approximate nearest neighbor search indexes](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/annindexes) enable ClickHouse to be used as a high</doc_content>
</document>





</documents>



Answer: There is no "Run House" mentioned in the provided documents. It seems you meant to ask about the difference between ClickHouse and other entities, but since there's no "Run House", I'll assume you're asking about the general differences.

ClickHouse is a fast and resource-efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. It has data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes, enabling it to be used as a high-performance and scalable vector database to store and search vectors with SQL.