<documents>
<document index='0'>
<source>https://python.langchain.com/docs/integrations/document_loaders/csv</source>
<doc_content>CSV | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# CSV

A [comma-separated values (CSV)](https://en.wikipedia.org/wiki/Comma-separated_values) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas.

Load [csv](https://en.wikipedia.org/wiki/Comma-separated_values) data with a single row per document.

```python
from langchain.document_loaders.csv_loader import CSVLoader
```

```python
loader = CSVLoader(file_path="./example_data/mlb_teams_2012.csv")

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/modules/data_connection/document_loaders/csv</source>
<doc_content>CSV | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# CSV

A [comma-separated values (CSV)](https://en.wikipedia.org/wiki/Comma-separated_values) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas.

Load CSV data with a single row per document.

```python
from langchain.document_loaders.csv_loader import CSVLoader

loader = CSVLoader(file_path='./example_data/mlb_teams_2012.csv')
data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/integrations/document_loaders/csv</source>
<doc_content>## Customizing the csv parsing and loading‚Äã

See the [csv module](https://docs.python.org/3/library/csv.html) documentation for more information of what csv args are supported.

```python
loader = CSVLoader(
    file_path="./example_data/mlb_teams_2012.csv",
    csv_args={
        "delimiter": ",",
        "quotechar": '"',
        "fieldnames": ["MLB Team", "Payroll in millions", "Wins"],
    },
)

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='3'>
<source>https://python.langchain.com/docs/modules/data_connection/document_loaders/csv</source>
<doc_content>## Customizing the CSV parsing and loading‚Äã

See the [csv module](https://docs.python.org/3/library/csv.html) documentation for more information of what csv args are supported.

```python
loader = CSVLoader(file_path='./example_data/mlb_teams_2012.csv', csv_args={
    'delimiter': ',',
    'quotechar': '"',
    'fieldnames': ['MLB Team', 'Payroll in millions', 'Wins']
})

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin</source>
<doc_content>```python
# STEP 1: Load

# Load documents using LangChain's DocumentLoaders
# This is from https://langchain.readthedocs.io/en/latest/modules/document_loaders/examples/csv.html

from langchain.document_loaders.csv_loader import CSVLoader

loader = CSVLoader(
    file_path="../../document_loaders/examples/example_data/mlb_teams_2012.csv"
)
data = loader.load()

# STEP 2: Convert

# Convert Document to format expected by https://github.com/openai/chatgpt-retrieval-plugin
import json
from typing import List

from langchain.docstore.document import Document

def write_json(path: str, documents: List[Document]) -> None:
    results = [{"text": doc.page_content} for doc in documents]
    with open(path, "w") as f:
        json.dump(results, f, indent=2)

write_json("foo.json", data)

# STEP 3: Use

# Ingest this as you would any other json file in https://github.com/openai/chatgpt-retrieval-plugin/tree/main/scripts/process_json
```

## Using the ChatGPT Retriever Plugin‚Äã</doc_content>
</document>





<document index='5'>
<source>https://api.python.langchain.com/en/latest/api_reference.html</source>
<doc_content>document_loaders.csv_loader.CSVLoader(file_path)
Load a CSV file into a list of Documents.

document_loaders.csv_loader.UnstructuredCSVLoader(...)
Load CSV files using Unstructured.

document_loaders.cube_semantic.CubeSemanticLoader(...)
Load Cube semantic layer metadata.

document_loaders.datadog_logs.DatadogLogsLoader(...)
Load Datadog logs.

document_loaders.dataframe.BaseDataFrameLoader(...)
Initialize with dataframe object.

document_loaders.dataframe.DataFrameLoader(...)
Load Pandas DataFrame.

document_loaders.diffbot.DiffbotLoader(...)
Load Diffbot json file.

document_loaders.directory.DirectoryLoader(...)
Load from a directory.

document_loaders.discord.DiscordChatLoader(...)
Load Discord chat logs.

document_loaders.docugami.DocugamiLoader
Load from Docugami.</doc_content>
</document>





<document index='6'>
<source>https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.csv_loader.CSVLoader.html</source>
<doc_content>API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.document_loaders.csv_loader.CSVLoader

langchain.document_loaders.csv_loader.CSVLoader¬∂

class langchain.document_loaders.csv_loader.CSVLoader(file_path: str, source_column: Optional[str] = None, metadata_columns: Sequence[str] = (), csv_args: Optional[Dict] = None, encoding: Optional[str] = None, autodetect_encoding: bool = False)[source]¬∂
Load a CSV file into a list of Documents.
Each document represents one row of the CSV file. Every row is converted into a
key/value pair and outputted to a new line in the document‚Äôs page_content.
The source for each document loaded from csv is set to the value of the
file_path argument for all documents by default.
You can override this by setting the source_column argument to the
name of a column in the CSV file.
The source of each document will then be set to the value of the column
with the name specified in source_column.</doc_content>
</document>





</documents>



Rephrased Quetion: I'd be happy to help!

The original query "how to load CSV files???" seems to be asking about the process of loading CSV (Comma Separated Values) files, but it's a bit unclear and open-ended.

To rephrase this query into a more specific and retrieval-friendly question, I would suggest:

"What is the best way to import or read a CSV file into [specific programming language or platform]?"

Or, depending on the context,

"How can I load a CSV file into [specific application or software] for data analysis or processing?"

These rephrased queries are more concise and targeted, making it easier to provide a relevant and accurate response.



Answer: To load a CSV file, you can use the `CSVLoader` class from LangChain's document loaders. Here's an example:
```
from langchain.document_loaders.csv_loader import CSVLoader
loader = CSVLoader(file_path="./example_data/mlb_teams_2012.csv")
data = loader.load()
print(data)
```