<documents>
<document index='0'>
<source>https://python.langchain.com/docs/modules/data_connection/vectorstores/</source>
<doc_content>Vector stores | 🦜️🔗 Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Vector stores

infoHead to [Integrations](/docs/integrations/vectorstores/) for documentation on built-in integrations with 3rd-party vector stores.</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/modules/data_connection/</source>
<doc_content>**Vector stores**

With the rise of embeddings, there has emerged a need for databases to support efficient storage and searching of these embeddings.
LangChain provides integrations with over 50 different vectorstores, from open-source local ones to cloud-hosted proprietary ones,
allowing you to choose the one best suited for your needs.
LangChain exposes a standard interface, allowing you to easily swap between vector stores.

**Retrievers**</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/integrations/vectorstores</source>
<doc_content>Vector stores | 🦜️🔗 Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Vector stores</doc_content>
</document>





<document index='3'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html</source>
<doc_content>langchain.vectorstores.elasticsearch.ElasticsearchStore — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.elasticsearch.ElasticsearchStore

langchain.vectorstores.elasticsearch.ElasticsearchStore¶</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/integrations/retrievers/fleet_context</source>
<doc_content>[Document(page_content='Vector store-backed retriever | 🦜️🔗 Langchain\n# Vector store-backed retriever A vector store retriever is a retriever that uses a vector store to retrieve documents. It is a lightweight wrapper around the vector store class to make it conform to the retriever interface. It uses the search methods implemented by a vector store, like similarity search and MMR, to query the texts in the vector store. Once you construct a vector store, it\'s very easy to construct a</doc_content>
</document>





<document index='5'>
<source>https://python.langchain.com/docs/integrations/providers/clarifai</source>
<doc_content>a vector store in one production scale platform, making it an excellent choice to operationalize your LangChain implementations.</doc_content>
</document>





<document index='6'>
<source>https://api.python.langchain.com/en/latest/docstore/langchain.docstore.base.Docstore.html</source>
<doc_content>langchain.docstore.base.Docstore — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.docstore.base.Docstore

langchain.docstore.base.Docstore¶

class langchain.docstore.base.Docstore[source]¶
Interface to access to place that stores documents.
Methods

__init__()

delete(ids)
Deleting IDs from in memory dictionary.

search(search)
Search for document.

__init__()¶

delete(ids: List) → None[source]¶
Deleting IDs from in memory dictionary.</doc_content>
</document>





</documents>



Answer: In LangChain, a Vector Store is a database that stores embeddings, allowing for efficient storage and searching of these embeddings. On the other hand, a DocStore is an interface to access a place that stores documents. While Vector Stores are used for storing and querying embeddings, DocStores are used for storing and retrieving documents.