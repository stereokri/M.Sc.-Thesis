<documents>
<document index='0'>
<source>https://python.langchain.com/docs/integrations/toolkits/vectorstore</source>
<doc_content>Vectorstore | 🦜️🔗 Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Vectorstore

This notebook showcases an agent designed to retrieve information from one or more vectorstores, either with or without sources.

## Create Vectorstores​

```python
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.llms import OpenAI
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import Chroma

llm = OpenAI(temperature=0)
```

```python
from langchain.document_loaders import TextLoader

loader = TextLoader("../../modules/state_of_the_union.txt")
documents = loader.load()
text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
texts = text_splitter.split_documents(documents)

embeddings = OpenAIEmbeddings()
state_of_union_store = Chroma.from_documents(
    texts, embeddings, collection_name="state-of-union"
)
```</doc_content>
</document>





<document index='1'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html</source>
<doc_content>langchain.vectorstores.elasticsearch.ElasticsearchStore — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.elasticsearch.ElasticsearchStore

langchain.vectorstores.elasticsearch.ElasticsearchStore¶</doc_content>
</document>





<document index='2'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html</source>
<doc_content>langchain.vectorstores.elasticsearch.ElasticsearchStore — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.elasticsearch.ElasticsearchStore

langchain.vectorstores.elasticsearch.ElasticsearchStore¶</doc_content>
</document>





<document index='3'>
<source>https://python.langchain.com/docs/modules/data_connection/vectorstores/</source>
<doc_content>Vector stores | 🦜️🔗 Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Vector stores

infoHead to [Integrations](/docs/integrations/vectorstores/) for documentation on built-in integrations with 3rd-party vector stores.</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/integrations/toolkits/vectorstore</source>
<doc_content>Vectorstore | 🦜️🔗 Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Vectorstore

This notebook showcases an agent designed to retrieve information from one or more vectorstores, either with or without sources.

## Create Vectorstores​

```python
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.llms import OpenAI
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import Chroma

llm = OpenAI(temperature=0)
```</doc_content>
</document>





<document index='5'>
<source>https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreInfo.html</source>
<doc_content>langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreInfo — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreInfo

langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreInfo¶</doc_content>
</document>





<document index='6'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.xata.XataVectorStore.html</source>
<doc_content>langchain.vectorstores.xata.XataVectorStore — 🦜🔗 LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.xata.XataVectorStore

langchain.vectorstores.xata.XataVectorStore¶

class langchain.vectorstores.xata.XataVectorStore(api_key: str, db_url: str, embedding: Embeddings, table_name: str)[source]¶
Xata vector store.
It assumes you have a Xata database
created with the right schema. See the guide at:
https://integrations.langchain.com/vectorstores?integration_name=XataVectorStore
Initialize with Xata client.
Attributes

embeddings
Access the query embedding object if available.

Methods

__init__(api_key, db_url, embedding, table_name)
Initialize with Xata client.

aadd_documents(documents, **kwargs)
Run more documents through the embeddings and add to the vectorstore.

aadd_texts(texts[, metadatas])
Run more texts through the embeddings and add to the vectorstore.</doc_content>
</document>





</documents>



Answer: In LangChain, a VectorStore is a storage system for vectors, whereas a DocStore (not explicitly mentioned but implied) seems to be a storage system for documents. A VectorStore is used to store and retrieve information from one or more vector stores, either with or without sources, as shown in the notebook example.