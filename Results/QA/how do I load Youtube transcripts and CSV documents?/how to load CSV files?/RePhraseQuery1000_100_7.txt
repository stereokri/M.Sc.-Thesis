<documents>
<document index='0'>
<source>https://python.langchain.com/docs/integrations/document_loaders/csv</source>
<doc_content>CSV | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# CSV

A [comma-separated values (CSV)](https://en.wikipedia.org/wiki/Comma-separated_values) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas.

Load [csv](https://en.wikipedia.org/wiki/Comma-separated_values) data with a single row per document.

```python
from langchain.document_loaders.csv_loader import CSVLoader
```

```python
loader = CSVLoader(file_path="./example_data/mlb_teams_2012.csv")

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='1'>
<source>https://python.langchain.com/docs/modules/data_connection/document_loaders/csv</source>
<doc_content>CSV | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# CSV

A [comma-separated values (CSV)](https://en.wikipedia.org/wiki/Comma-separated_values) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas.

Load CSV data with a single row per document.

```python
from langchain.document_loaders.csv_loader import CSVLoader

loader = CSVLoader(file_path='./example_data/mlb_teams_2012.csv')
data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='2'>
<source>https://python.langchain.com/docs/integrations/document_loaders/csv</source>
<doc_content>## Customizing the csv parsing and loading‚Äã

See the [csv module](https://docs.python.org/3/library/csv.html) documentation for more information of what csv args are supported.

```python
loader = CSVLoader(
    file_path="./example_data/mlb_teams_2012.csv",
    csv_args={
        "delimiter": ",",
        "quotechar": '"',
        "fieldnames": ["MLB Team", "Payroll in millions", "Wins"],
    },
)

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='3'>
<source>https://python.langchain.com/docs/modules/data_connection/document_loaders/csv</source>
<doc_content>## Customizing the CSV parsing and loading‚Äã

See the [csv module](https://docs.python.org/3/library/csv.html) documentation for more information of what csv args are supported.

```python
loader = CSVLoader(file_path='./example_data/mlb_teams_2012.csv', csv_args={
    'delimiter': ',',
    'quotechar': '"',
    'fieldnames': ['MLB Team', 'Payroll in millions', 'Wins']
})

data = loader.load()
```

```python
print(data)
```</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/use_cases/qa_structured/sql</source>
<doc_content>### Go deeper‚Äã

You can load tabular data from other sources other than SQL Databases.
For example:

- [Loading a CSV file](/docs/integrations/document_loaders/csv)

- [Loading a Pandas DataFrame](/docs/integrations/document_loaders/pandas_dataframe)
Here you can [check full list of Document Loaders](/docs/integrations/document_loaders/)

## Case 1: Text-to-SQL query‚Äã

```python
from langchain.chains import create_sql_query_chain
from langchain.chat_models import ChatOpenAI
```

Let's create the chain that will build the SQL Query:

```python
chain = create_sql_query_chain(ChatOpenAI(temperature=0), db)
response = chain.invoke({"question": "How many employees are there"})
print(response)
```

```text
    SELECT COUNT(*) FROM Employee
```

After building the SQL query based on a user question, we can execute the query:

```python
db.run(response)
```

```text
    '[(8,)]'
```</doc_content>
</document>





<document index='5'>
<source>https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.csv_loader.CSVLoader.html</source>
<doc_content>langchain.document_loaders.csv_loader.CSVLoader

langchain.document_loaders.csv_loader.CSVLoader¬∂

class langchain.document_loaders.csv_loader.CSVLoader(file_path: str, source_column: Optional[str] = None, metadata_columns: Sequence[str] = (), csv_args: Optional[Dict] = None, encoding: Optional[str] = None, autodetect_encoding: bool = False)[source]¬∂
Load a CSV file into a list of Documents.
Each document represents one row of the CSV file. Every row is converted into a
key/value pair and outputted to a new line in the document‚Äôs page_content.
The source for each document loaded from csv is set to the value of the
file_path argument for all documents by default.
You can override this by setting the source_column argument to the
name of a column in the CSV file.
The source of each document will then be set to the value of the column
with the name specified in source_column.

Output Example:column1: value1
column2: value2
column3: value3

Parameters</doc_content>
</document>





<document index='6'>
<source>https://python.langchain.com/docs/integrations/document_loaders/csv</source>
<doc_content>- [Customizing the csv parsing and loading](#customizing-the-csv-parsing-and-loading)

- [Specify a column to identify the document source](#specify-a-column-to-identify-the-document-source)

- [UnstructuredCSVLoader](#unstructuredcsvloader)</doc_content>
</document>





</documents>



Rephrased Quetion: I'd be happy to help!

The original query "how to load CSV files???" seems to be asking about the process of loading CSV (Comma Separated Values) files, but it's a bit unclear and open-ended.

To rephrase this query into a more specific and retrieval-friendly question, I would suggest:

"What is the best way to import or read a CSV file into [specific programming language or platform]?"

Or, depending on the context,

"How can I load a CSV file into [specific application or software] for data analysis or processing?"

These rephrased queries are more concise and targeted, making it easier to provide a relevant and accurate response.



Answer: To load a CSV file, you can use the `CSVLoader` class from `langchain.document_loaders.csv_loader`. You need to import it and then create an instance of `CSVLoader`, passing the file path as an argument. Finally, call the `load()` method to load the data. Here's an example:
```python
from langchain.document_loaders.csv_loader import CSVLoader
loader = CSVLoader(file_path="./example_data/mlb_teams_2012.csv")
data = loader.load()
print(data)
```
This will load the CSV data with a single row per document.