<documents>
<document index='0'>
<source>https://api.python.langchain.com/en/latest/api_reference.html</source>
<doc_content>vectorstores.redis.base.RedisVectorStoreRetriever
Retriever for Redis VectorStore. vectorstores.redis.filters.RedisFilter()
Collection of RedisFilterFields. vectorstores.redis.filters.RedisFilterExpression([...])
A logical expression of RedisFilterFields. vectorstores.redis.filters.RedisFilterField(field)
Base class for RedisFilterFields. vectorstores.redis.filters.RedisFilterOperator(value)
RedisFilterOperator enumerator is used to create RedisFilterExpressions. vectorstores.redis.filters.RedisNum(field)
A RedisFilterField representing a numeric field in a Redis index. vectorstores.redis.filters.RedisTag(field)
A RedisFilterField representing a tag in a Redis index. vectorstores.redis.filters.RedisText(field)
A RedisFilterField representing a text field in a Redis index. vectorstores.redis.schema.FlatVectorField
Schema for flat vector fields in Redis. vectorstores.redis.schema.HNSWVectorField
Schema for HNSW vector fields in Redis. vectorstores.redis.schema.NumericFieldSchema
Schema for numeric fields in Redis. vectorstores.redis.schema.RedisDistanceMetric(value)
Distance metrics for Redis vector fields. vectorstores.redis.schema.RedisField
Base class for Redis fields. vectorstores.redis.schema.RedisModel
Schema for Redis index. vectorstores.redis.schema.RedisVectorField
Base class for Redis vector fields. vectorstores.redis.schema.TagFieldSchema
Schema for tag fields in Redis. vectorstores.redis.schema.TextFieldSchema
Schema for text fields in Redis. vectorstores.rocksetdb.Rockset(client,¬†...)
Rockset vector store. vectorstores.scann.ScaNN(embedding,¬†index,¬†...)
ScaNN vector store. vectorstores.semadb.SemaDB(collection_name,¬†...)
SemaDB vector store. vectorstores.singlestoredb.SingleStoreDB(...)
SingleStore DB vector store. vectorstores.sklearn.BaseSerializer(persist_path)
Base class for serializing data. vectorstores.sklearn.BsonSerializer(persist_path)
Serializes data in binary json using the bson python package. vectorstores.sklearn.JsonSerializer(persist_path)
Serializes data in json using the json package from python standard library. vectorstores.sklearn.ParquetSerializer(...)
Serializes data in Apache Parquet format using the pyarrow package. vectorstores.sklearn.SKLearnVectorStore(...)
Simple in-memory vector store based on the scikit-learn library NearestNeighbors implementation. vectorstores.sklearn.SKLearnVectorStoreException
Exception raised by SKLearnVectorStore. vectorstores.sqlitevss.SQLiteVSS(table,¬†...)
Wrapper around SQLite with vss extension as a vector database. vectorstores.starrocks.StarRocks(embedding)
StarRocks vector store. vectorstores.starrocks.StarRocksSettings
StarRocks client configuration. vectorstores.supabase.SupabaseVectorStore(...)
Supabase Postgres vector store. vectorstores.tair.Tair(embedding_function,¬†...)
Tair vector store. vectorstores.tencentvectordb.ConnectionParams(...)
Tencent vector DB Connection params. vectorstores.tencentvectordb.IndexParams(...)
Tencent vector DB Index params. vectorstores.tencentvectordb.TencentVectorDB(...)
Initialize wrapper around the tencent vector database. vectorstores.tigris.Tigris(client,¬†...)
Tigris vector store. vectorstores.tiledb.TileDB(embedding,¬†...[,¬†...])
Wrapper around TileDB vector database. vectorstores.timescalevector.TimescaleVector(...)
VectorStore implementation using the timescale vector client to store vectors in Postgres. vectorstores.typesense.Typesense(...[,¬†...])
Typesense vector store.</doc_content>
</document>





<document index='1'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisTag.html</source>
<doc_content>langchain.vectorstores.redis.filters.RedisTag ‚Äî ü¶úüîó LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.redis.filters.RedisTag

langchain.vectorstores.redis.filters.RedisTag¬∂

class langchain.vectorstores.redis.filters.RedisTag(field: str)[source]¬∂
A RedisFilterField representing a tag in a Redis index. Create a RedisTag FilterField

Parameters
field (str) ‚Äì The name of the RedisTag field in the index to be queried
against. Attributes

OPERATORS

OPERATOR_MAP

escaper

Methods

__init__(field)
Create a RedisTag FilterField

equals(other)

__init__(field: str)[source]¬∂
Create a RedisTag FilterField

Parameters
field (str) ‚Äì The name of the RedisTag field in the index to be queried
against. equals(other: RedisFilterField) ‚Üí bool¬∂

Examples using RedisTag¬∂

Redis

            ¬© 2023, Harrison Chase. Last updated on Nov 17, 2023.</doc_content>
</document>





<document index='2'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.base.Redis.html</source>
<doc_content>OpenAIEmbeddings)
for embedding queries. metadatas (Optional[List[dict]], optional) ‚Äì Optional list of metadata dicts
to add to the vectorstore. Defaults to None. index_name (Optional[str], optional) ‚Äì Optional name of the index to create
or add to. Defaults to None. index_schema (Optional[Union[Dict[str, str], str, os.PathLike]], optional) ‚Äì Optional fields to index within the metadata. Overrides generated
schema. Defaults to None. vector_schema (Optional[Dict[str, Union[str, int]]], optional) ‚Äì Optional
vector schema to use. Defaults to None. **kwargs (Any) ‚Äì Additional keyword arguments to pass to the Redis client. Returns
Redis VectorStore instance. Return type
Redis

Raises

ValueError ‚Äì If the number of metadatas does not match the number of texts. ImportError ‚Äì If the redis python package is not installed. classmethod from_texts_return_keys(texts: List[str], embedding: Embeddings, metadatas: Optional[List[dict]] = None, index_name: Optional[str] = None, index_schema: Optional[Union[Dict[str, str], str, PathLike]] = None, vector_schema: Optional[Dict[str, Union[int, str]]] = None, **kwargs: Any) ‚Üí Tuple[Redis, List[str]][source]¬∂
Create a Redis vectorstore from raw documents. This is a user-friendly interface that:
Embeds documents. Creates a new Redis index if it doesn‚Äôt already exist
Adds the documents to the newly created Redis index. Returns the keys of the newly created documents once stored. This method will generate schema based on the metadata passed in
if the index_schema is not defined. If the index_schema is defined,
it will compare against the generated schema and warn if there are
differences. If you are purposefully defining the schema for the
metadata, then you can ignore that warning. To examine the schema options, initialize an instance of this class
and print out the schema using the Redis.schema` property. This
will include the content and content_vector classes which are
always present in the langchain schema. Example
from langchain.vectorstores import Redis
from langchain.embeddings import OpenAIEmbeddings
embeddings = OpenAIEmbeddings()
redis, keys = Redis.from_texts_return_keys(
    texts,
    embeddings,
    redis_url="redis://localhost:6379"
)

Parameters

texts (List[str]) ‚Äì List of texts to add to the vectorstore. embedding (Embeddings) ‚Äì Embeddings to use for the vectorstore. metadatas (Optional[List[dict]], optional) ‚Äì Optional list of metadata
dicts to add to the vectorstore. Defaults to None. index_name (Optional[str], optional) ‚Äì Optional name of the index to
create or add to. Defaults to None. index_schema (Optional[Union[Dict[str, str], str, os.PathLike]], optional) ‚Äì Optional fields to index within the metadata. Overrides generated
schema. Defaults to None. vector_schema (Optional[Dict[str, Union[str, int]]], optional) ‚Äì Optional
vector schema to use. Defaults to None. **kwargs (Any) ‚Äì Additional keyword arguments to pass to the Redis client. Returns

Tuple of the Redis instance and the keys ofthe newly created documents. Return type
Tuple[Redis, List[str]]

Raises
ValueError ‚Äì If the number of metadatas does not match the number of texts. max_marginal_relevance_search(query: str, k: int = 4, fetch_k: int = 20, lambda_mult: float = 0.5, filter: Optional[RedisFilterExpression] = None, return_metadata: bool = True, distance_threshold: Optional[float] = None, **kwargs: Any) ‚Üí List[Document][source]¬∂
Return docs selected using the maximal marginal relevance. Maximal marginal relevance optimizes for similarity to query AND diversityamong selected documents. Parameters

query (str) ‚Äì Text to look up documents similar to. k (int) ‚Äì Number of Documents to return. Defaults to 4. fetch_k (int) ‚Äì Number of Documents to fetch to pass to MMR algorithm. lambda_mult (float) ‚Äì Number between 0 and 1 that determines the degree
of diversity among the results with 0 corresponding
to maximum diversity and 1 to minimum diversity. Defaults to 0.5.</doc_content>
</document>





<document index='3'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.utils.filter_complex_metadata.html</source>
<doc_content>langchain.vectorstores.utils.filter_complex_metadata ‚Äî ü¶úüîó LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.utils.filter_complex_metadata

langchain.vectorstores.utils.filter_complex_metadata¬∂

langchain.vectorstores.utils.filter_complex_metadata(documents: ~typing.List[~langchain.schema.document.Document], *, allowed_types: ~typing.Tuple[~typing.Type, ...] = (<class 'str'>, <class 'bool'>, <class 'int'>, <class 'float'>)) ‚Üí List[Document][source]¬∂
Filter out metadata types that are not supported for a vector store. ¬© 2023, Harrison Chase.</doc_content>
</document>





<document index='4'>
<source>https://python.langchain.com/docs/integrations/vectorstores/redis</source>
<doc_content>Redis | ü¶úÔ∏èüîó Langchain

[Skip to main content](#docusaurus_skipToContent_fallback)# Redis

Redis vector database introduction and langchain integration guide. ## What is Redis?‚Äã

Most developers from a web services background are probably familiar with Redis. At it's core, Redis is an open-source key-value store that can be used as a cache, message broker, and database. Developers choose Redis because it is fast, has a large ecosystem of client libraries, and has been deployed by major enterprises for years. On top of these traditional use cases, Redis provides additional capabilities like the Search and Query capability that allows users to create secondary index structures within Redis. This allows Redis to be a Vector Database, at the speed of a cache. ## Redis as a Vector Database‚Äã

Redis uses compressed, inverted indexes for fast indexing with a low memory footprint. It also supports a number of advanced features such as:

- Indexing of multiple fields in Redis hashes and JSON

- Vector similarity search (with HNSW (ANN) or FLAT (KNN))

- Vector Range Search (e.g. find all vectors within a radius of a query vector)

- Incremental indexing without performance loss

- Document ranking (using [tf-idf](https://en.wikipedia.org/wiki/Tf%E2%80%93idf), with optional user-provided weights)

- Field weighting

- Complex boolean queries with AND, OR, and NOT operators

- Prefix matching, fuzzy matching, and exact-phrase queries

- Support for [double-metaphone phonetic matching](https://redis.io/docs/stack/search/reference/phonetic_matching/)

- Auto-complete suggestions (with fuzzy prefix suggestions)

- Stemming-based query expansion in [many languages](https://redis.io/docs/stack/search/reference/stemming/) (using [Snowball](http://snowballstem.org/))

- Support for Chinese-language tokenization and querying (using [Friso](https://github.com/lionsoul2014/friso))

- Numeric filters and ranges

- Geospatial searches using [Redis geospatial indexing](/commands/georadius)

- A powerful aggregations engine

- Supports for all utf-8 encoded text

- Retrieve full documents, selected fields, or only the document IDs

- Sorting results (for example, by creation date)

## Clients‚Äã

Since redis is much more than just a vector database, there are often use cases that demand usage of a Redis client besides just the langchain integration. You can use any standard Redis client library to run Search and Query commands, but it's easiest to use a library that wraps the Search and Query API. Below are a few examples, but you can find more client libraries [here](https://redis.io/resources/clients/). | Project | Language | License | Author | Stars |
| ---- | ---- | ---- | ---- | ---- |
| jedis | Java | MIT | Redis |  |
| redisvl | Python | MIT | Redis |  |
| redis-py | Python | MIT | Redis |  |
| node-redis | Node.js | MIT | Redis |  |
| nredisstack | .NET | MIT | Redis |  |

## Deployment Options‚Äã

There are many ways to deploy Redis with RediSearch. The easiest way to get started is to use Docker, but there are are many potential options for deployment such as

- [Redis Cloud](https://redis.com/redis-enterprise-cloud/overview/)

- [Docker (Redis Stack)](https://hub.docker.com/r/redis/redis-stack)

- Cloud marketplaces: [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-e6y7ork67pjwg?sr=0-2&ref_=beagle&applicationId=AWSMPContessa), [Google Marketplace](https://console.cloud.google.com/marketplace/details/redislabs-public/redis-enterprise?pli=1), or [Azure Marketplace](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/garantiadata.redis_enterprise_1sp_public_preview?tab=Overview)

- On-premise: [Redis Enterprise Software](https://redis.com/redis-enterprise-software/overview/)

- Kubernetes: [Redis Enterprise Software on Kubernetes](https://docs.redis.com/latest/kubernetes/)

## Examples‚Äã

Many examples can be found in the [Redis AI team's GitHub](https://github.com/RedisVentures/)

- [Awesome Redis AI Resources](https://github.com/RedisVentures/redis-ai-resources) - List of examples of using Redis in AI workloads

- [Azure OpenAI Embeddings Q&A](https://github.com/ruoccofabrizio/azure-open-ai-embeddings-qna) - OpenAI and Redis as a Q&A service on Azure. - [ArXiv Paper Search](https://github.com/RedisVentures/redis-arXiv-search) - Semantic search over arXiv scholarly papers

- [Vector Search on Azure](https://learn.microsoft.com/azure/azure-cache-for-redis/cache-tutorial-vector-similarity) - Vector search on Azure using Azure Cache for Redis and Azure OpenAI

## More Resources‚Äã

For more information on how to use Redis as a vector database, check out the following resources:

- [RedisVL Documentation](https://redisvl.com) - Documentation for the Redis Vector Library Client

- [Redis Vector Similarity Docs](https://redis.io/docs/stack/search/reference/vectors/) - Redis official docs for Vector Search. - [Redis-py Search Docs](https://redis.readthedocs.io/en/latest/redismodules.html#redisearch-commands) - Documentation for redis-py client library

- [Vector Similarity Search: From Basics to Production](https://mlops.community/vector-similarity-search-from-basics-to-production/) - Introductory blog post to VSS and Redis as a VectorDB. ## Install Redis Python Client‚Äã

Redis-py is the officially supported client by Redis. Recently released is the RedisVL client which is purpose-built for the Vector Database use cases. Both can be installed with pip. ```bash
pip install redis redisvl openai tiktoken
```

We want to use `OpenAIEmbeddings` so we have to get the OpenAI API Key. ```python
import getpass
import os

os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")
```

```python
from langchain.embeddings import OpenAIEmbeddings

embeddings = OpenAIEmbeddings()
```

## Sample Data‚Äã

First we will describe some sample data so that the various attributes of the Redis vector store can be demonstrated. ```python
metadata = [
    {
        "user": "john",
        "age": 18,
        "job": "engineer",
        "credit_score": "high",
    },
    {
        "user": "derrick",
        "age": 45,
        "job": "doctor",
        "credit_score": "low",
    },
    {
        "user": "nancy",
        "age": 94,
        "job": "doctor",
        "credit_score": "high",
    },
    {
        "user": "tyler",
        "age": 100,
        "job": "engineer",
        "credit_score": "high",
    },
    {
        "user": "joe",
        "age": 35,
        "job": "dentist",
        "credit_score": "medium",
    },
]
texts = ["foo", "foo", "foo", "bar", "bar"]
```

## Initializing Redis‚Äã

To locally deploy Redis, run:

```console
docker run -d -p 6379:6379 -p 8001:8001 redis/redis-stack:latest
```

If things are running correctly you should see a nice Redis UI at http://localhost:8001. See the [Deployment Options](#deployment-options) section above for other ways to deploy. The Redis VectorStore instance can be initialized in a number of ways. There are multiple class methods that can be used to initialize a Redis VectorStore instance. - `Redis.__init__` - Initialize directly

- `Redis.from_documents` - Initialize from a list of `Langchain.docstore.Document` objects

- `Redis.from_texts` - Initialize from a list of texts (optionally with metadata)

- `Redis.from_texts_return_keys` - Initialize from a list of texts (optionally with metadata) and return the keys

- `Redis.from_existing_index` - Initialize from an existing Redis index

Below we will use the `Redis.from_texts` method. ```python
from langchain.vectorstores.redis import Redis

rds = Redis.from_texts(
    texts,
    embeddings,
    metadatas=metadata,
    redis_url="redis://localhost:6379",
    index_name="users",
)
```

```python
rds.index_name
```

```text
    'users'
```

## Inspecting the Created Index‚Äã

Once the `Redis` VectorStore object has been constructed, an index will have been created in Redis if it did not already exist. The index can be inspected with both the `rvl`and the `redis-cli` command line tool. If you installed `redisvl` above, you can use the `rvl` command line tool to inspect the index. ```bash
# assumes you're running Redis locally (use --host, --port, --password, --username, to change this)
rvl index listall
```

```text
    16:58:26 [RedisVL] INFO   Indices:
    16:58:26 [RedisVL] INFO   1. users
```

The `Redis` VectorStore implementation will attempt to generate index schema (fields for filtering) for any metadata passed through the `from_texts`, `from_texts_return_keys`, and `from_documents` methods. This way, whatever metadata is passed will be indexed into the Redis search index allowing
for filtering on those fields. Below we show what fields were created from the metadata we defined above

```bash
rvl index info -i users
```

```text
    
    
    Index Information:
    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
    ‚îÇ Index Name   ‚îÇ Storage Type   ‚îÇ Prefixes      ‚îÇ Index Options   ‚îÇ   Indexing ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ users        ‚îÇ HASH           ‚îÇ ['doc:users'] ‚îÇ []              ‚îÇ          0 ‚îÇ
    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
    Index Fields:
    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
    ‚îÇ Name           ‚îÇ Attribute      ‚îÇ Type    ‚îÇ Field Option   ‚îÇ   Option Value ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ user           ‚îÇ user           ‚îÇ TEXT    ‚îÇ WEIGHT         ‚îÇ              1 ‚îÇ
    ‚îÇ job            ‚îÇ job            ‚îÇ TEXT    ‚îÇ WEIGHT         ‚îÇ              1 ‚îÇ
    ‚îÇ credit_score   ‚îÇ credit_score   ‚îÇ TEXT    ‚îÇ WEIGHT         ‚îÇ              1 ‚îÇ
    ‚îÇ content        ‚îÇ content        ‚îÇ TEXT    ‚îÇ WEIGHT         ‚îÇ              1 ‚îÇ
    ‚îÇ age            ‚îÇ age            ‚îÇ NUMERIC ‚îÇ                ‚îÇ                ‚îÇ
    ‚îÇ content_vector ‚îÇ content_vector ‚îÇ VECTOR  ‚îÇ                ‚îÇ                ‚îÇ
    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
```

```bash
rvl stats -i users
```

```text
    
    Statistics:
    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
    ‚îÇ Stat Key                    ‚îÇ Value       ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ num_docs                    ‚îÇ 5           ‚îÇ
    ‚îÇ num_terms                   ‚îÇ 15          ‚îÇ
    ‚îÇ max_doc_id                  ‚îÇ 5           ‚îÇ
    ‚îÇ num_records                 ‚îÇ 33          ‚îÇ
    ‚îÇ percent_indexed             ‚îÇ 1           ‚îÇ
    ‚îÇ hash_indexing_failures      ‚îÇ 0           ‚îÇ
    ‚îÇ number_of_uses              ‚îÇ 4           ‚îÇ
    ‚îÇ bytes_per_record_avg        ‚îÇ 4.60606     ‚îÇ
    ‚îÇ doc_table_size_mb           ‚îÇ 0.000524521 ‚îÇ
    ‚îÇ inverted_sz_mb              ‚îÇ 0.000144958 ‚îÇ
    ‚îÇ key_table_size_mb           ‚îÇ 0.000193596 ‚îÇ
    ‚îÇ offset_bits_per_record_avg  ‚îÇ 8           ‚îÇ
    ‚îÇ offset_vectors_sz_mb        ‚îÇ 2.19345e-05 ‚îÇ
    ‚îÇ offsets_per_term_avg        ‚îÇ 0.69697     ‚îÇ
    ‚îÇ records_per_doc_avg         ‚îÇ 6.6         ‚îÇ
    ‚îÇ sortable_values_size_mb     ‚îÇ 0           ‚îÇ
    ‚îÇ total_indexing_time         ‚îÇ 0.32        ‚îÇ
    ‚îÇ total_inverted_index_blocks ‚îÇ 16          ‚îÇ
    ‚îÇ vector_index_sz_mb          ‚îÇ 6.0126      ‚îÇ
    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
```

It's important to note that we have not specified that the `user`, `job`, `credit_score` and `age` in the metadata should be fields within the index, this is because the `Redis` VectorStore object automatically generate the index schema from the passed metadata. For more information on the generation of index fields, see the API documentation. ## Querying‚Äã

There are multiple ways to query the `Redis` VectorStore implementation based on what use case you have:

- `similarity_search`: Find the most similar vectors to a given vector. - `similarity_search_with_score`: Find the most similar vectors to a given vector and return the vector distance

- `similarity_search_limit_score`: Find the most similar vectors to a given vector and limit the number of results to the `score_threshold`

- `similarity_search_with_relevance_scores`: Find the most similar vectors to a given vector and return the vector similarities

- `max_marginal_relevance_search`: Find the most similar vectors to a given vector while also optimizing for diversity

```python
results = rds.similarity_search("foo")
print(results[0].page_content)
```

```text
    foo
```

```python
# return metadata
results = rds.similarity_search("foo", k=3)
meta = results[1].metadata
print("Key of the document in Redis: ", meta.pop("id"))
print("Metadata of the document: ", meta)
```

```text
    Key of the document in Redis:  doc:users:a70ca43b3a4e4168bae57c78753a200f
    Metadata of the document:  {'user': 'derrick', 'job': 'doctor', 'credit_score': 'low', 'age': '45'}
```

```python
# with scores (distances)
results = rds.similarity_search_with_score("foo", k=5)
for result in results:
    print(f"Content: {result[0].page_content} --- Score: {result[1]}")
```

```text
    Content: foo --- Score: 0.0
    Content: foo --- Score: 0.0
    Content: foo --- Score: 0.0
    Content: bar --- Score: 0.1566
    Content: bar --- Score: 0.1566
```

```python
# limit the vector distance that can be returned
results = rds.similarity_search_with_score("foo", k=5, distance_threshold=0.1)
for result in results:
    print(f"Content: {result[0].page_content} --- Score: {result[1]}")
```

```text
    Content: foo --- Score: 0.0
    Content: foo --- Score: 0.0
    Content: foo --- Score: 0.0
```

```python
# with scores
results = rds.similarity_search_with_relevance_scores("foo", k=5)
for result in results:
    print(f"Content: {result[0].page_content} --- Similiarity: {result[1]}")
```

```text
    Content: foo --- Similiarity: 1.0
    Content: foo --- Similiarity: 1.0
    Content: foo --- Similiarity: 1.0
    Content: bar --- Similiarity: 0.8434
    Content: bar --- Similiarity: 0.8434
```

```python
# limit scores (similarities have to be over .9)
results = rds.similarity_search_with_relevance_scores("foo", k=5, score_threshold=0.9)
for result in results:
    print(f"Content: {result[0].page_content} --- Similarity: {result[1]}")
```

```text
    Content: foo --- Similarity: 1.0
    Content: foo --- Similarity: 1.0
    Content: foo --- Similarity: 1.0
```

```python
# you can also add new documents as follows
new_document = ["baz"]
new_metadata = [{"user": "sam", "age": 50, "job": "janitor", "credit_score": "high"}]
# both the document and metadata must be lists
rds.add_texts(new_document, new_metadata)
```

```text
    ['doc:users:b9c71d62a0a34241a37950b448dafd38']
```

```python
# now query the new document
results = rds.similarity_search("baz", k=3)
print(results[0].metadata)
```

```text
    {'id': 'doc:users:b9c71d62a0a34241a37950b448dafd38', 'user': 'sam', 'job': 'janitor', 'credit_score': 'high', 'age': '50'}
```

```python
# use maximal marginal relevance search to diversify results
results = rds.max_marginal_relevance_search("foo")
```

```python
# the lambda_mult parameter controls the diversity of the results, the lower the more diverse
results = rds.max_marginal_relevance_search("foo", lambda_mult=0.1)
```

## Connect to an Existing Index‚Äã

In order to have the same metadata indexed when using the `Redis` VectorStore. You will need to have the same `index_schema` passed in either as a path to a yaml file or as a dictionary.</doc_content>
</document>





<document index='5'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisText.html</source>
<doc_content>langchain.vectorstores.redis.filters.RedisText ‚Äî ü¶úüîó LangChain 0.0.337

API

Experimental

Python Docs

Toggle Menu

PrevUp
Next

LangChain 0.0.337

langchain.vectorstores.redis.filters.RedisText

langchain.vectorstores.redis.filters.RedisText¬∂

class langchain.vectorstores.redis.filters.RedisText(field: str)[source]¬∂
A RedisFilterField representing a text field in a Redis index. Attributes

OPERATORS

OPERATOR_MAP

escaper

Methods

__init__(field)

equals(other)

__init__(field: str)¬∂

equals(other: RedisFilterField) ‚Üí bool¬∂

Examples using RedisText¬∂

Redis

            ¬© 2023, Harrison Chase. Last updated on Nov 17, 2023.</doc_content>
</document>





<document index='6'>
<source>https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.base.Redis.html</source>
<doc_content>filter (RedisFilterExpression, optional) ‚Äì Optional metadata filter. Defaults to None. return_metadata (bool, optional) ‚Äì Whether to return metadata. Defaults to True. distance_threshold (Optional[float], optional) ‚Äì Maximum vector distance
between selected documents and the query vector. Defaults to None. Returns
A list of Documents selected by maximal marginal relevance. Return type
List[Document]

max_marginal_relevance_search_by_vector(embedding: List[float], k: int = 4, fetch_k: int = 20, lambda_mult: float = 0.5, **kwargs: Any) ‚Üí List[Document]¬∂
Return docs selected using the maximal marginal relevance. Maximal marginal relevance optimizes for similarity to query AND diversity
among selected documents. Parameters

embedding ‚Äì Embedding to look up documents similar to. k ‚Äì Number of Documents to return. Defaults to 4. fetch_k ‚Äì Number of Documents to fetch to pass to MMR algorithm. lambda_mult ‚Äì Number between 0 and 1 that determines the degree
of diversity among the results with 0 corresponding
to maximum diversity and 1 to minimum diversity. Defaults to 0.5.</doc_content>
</document>





</documents>



Answer: You can search and filter metadata in Redis VectorStore using various methods such as `similarity_search`, `max_marginal_relevance_search`, and filters like `RedisFilterField` and `RedisFilterExpression`. These methods allow you to specify a query, filter criteria, and other parameters to retrieve relevant documents with their associated metadata.